name: 2. Deploy Backend to AWS Lambda

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      PROD_URL:
        required: true

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: SharedBills-Backend
  DYNAMODB_TABLE_NAME: shared-bills-kv-store
  IAM_ROLE_NAME: Lambda-SharedBills-ExecutionRole
  API_GATEWAY_NAME: SharedBills-Backend-Gateway

jobs:
  deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install
      
      - name: Install Zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build Lambda package
        run: npm run build:lambda

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-Lambda-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Create DynamoDB Table if it does not exist
        run: |
          if ! aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} > /dev/null 2>&1; then
            echo "DynamoDB table ${{ env.DYNAMODB_TABLE_NAME }} not found. Creating it..."
            aws dynamodb create-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST
            echo "Waiting for table to become active..."
            aws dynamodb wait table-exists --table-name ${{ env.DYNAMODB_TABLE_NAME }}
            echo "Enabling Time To Live (TTL) on the table..."
            aws dynamodb update-time-to-live --table-name ${{ env.DYNAMODB_TABLE_NAME }} --time-to-live-specification "Enabled=true, AttributeName=ttl"
            echo "DynamoDB table created and configured successfully."
          else
            echo "DynamoDB table ${{ env.DYNAMODB_TABLE_NAME }} already exists. Skipping creation."
          fi

      - name: Create or Update Lambda Execution Role
        id: iam_role
        run: |
          if ! ROLE_ARN=$(aws iam get-role --role-name ${{ env.IAM_ROLE_NAME }} --query 'Role.Arn' --output text 2>/dev/null); then
            echo "IAM role ${{ env.IAM_ROLE_NAME }} not found. Creating it..."
            TRUST_POLICY='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
            ROLE_ARN=$(aws iam create-role --role-name ${{ env.IAM_ROLE_NAME }} --assume-role-policy-document "${TRUST_POLICY}" --query 'Role.Arn' --output text)
            echo "Attaching policies to new role..."
            aws iam attach-role-policy --role-name ${{ env.IAM_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            aws iam attach-role-policy --role-name ${{ env.IAM_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
            echo "Waiting for IAM role to propagate..."
            sleep 15
          else
            echo "IAM role ${{ env.IAM_ROLE_NAME }} already exists."
          fi
          echo "EXECUTION_ROLE_ARN=${ROLE_ARN}" >> $GITHUB_OUTPUT

      - name: Deploy Lambda Function
        run: |
          # Construct the environment variables string
          ENV_VARS="Variables={API_KEY=${{ secrets.API_KEY }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }},STRIPE_PRICE_ID_YEARLY=${{ secrets.STRIPE_PRICE_ID_YEARLY }},PAYMENT_PROVIDER=${{ secrets.PAYMENT_PROVIDER || 'paypal' }},PAYPAL_CLIENT_ID=${{ secrets.PAYPAL_CLIENT_ID }},PAYPAL_CLIENT_SECRET=${{ secrets.PAYPAL_CLIENT_SECRET }},PAYPAL_PLAN_ID_MONTHLY=${{ secrets.PAYPAL_PLAN_ID_MONTHLY }},PAYPAL_PLAN_ID_YEARLY=${{ secrets.PAYPAL_PLAN_ID_YEARLY }},PAYPAL_MODE=${{ secrets.PAYPAL_MODE || 'live' }},DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }},CORS_ALLOWED_ORIGIN=${{ secrets.PROD_URL }}}"

          if ! aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Creating new Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda create-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --runtime nodejs20.x --handler lambda.handler --role ${{ steps.iam_role.outputs.EXECUTION_ROLE_ARN }} --zip-file fileb://dist-lambda/function.zip --environment "$ENV_VARS" --timeout 15
          else
            echo "Updating existing Lambda function code: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --zip-file fileb://dist-lambda/function.zip
            echo "Waiting for function code update to complete..."
            aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
            echo "Updating existing Lambda function configuration: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda update-function-configuration --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --environment "$ENV_VARS" --timeout 15
          fi
      
      - name: Create or Update API Gateway
        id: api_gateway
        run: |
          FUNCTION_ARN=$(aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'Configuration.FunctionArn' --output text)
          API_NAME="${{ env.API_GATEWAY_NAME }}"
          CORS_CONFIG='{"AllowOrigins":["https://{{ secrets.PROD_URL }}"]}'
          
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='${API_NAME}'].ApiId" --output text)

          if [ -z "$API_ID" ]; then
            echo "API Gateway '${API_NAME}' not found. Creating it..."
            API_ID=$(aws apigatewayv2 create-api \
              --name "${API_NAME}" \
              --protocol-type HTTP \
              --target "${FUNCTION_ARN}" \
              --cors-configuration "${CORS_CONFIG}" \
              --query 'ApiId' --output text)
            echo "API Gateway created with ID: ${API_ID}"
          else
            echo "API Gateway '${API_NAME}' already exists with ID: ${API_ID}. Updating CORS..."
            aws apigatewayv2 update-api --api-id ${API_ID} --cors-configuration "${CORS_CONFIG}"
          fi
          
          echo "API_ID=${API_ID}" >> $GITHUB_OUTPUT

      - name: Grant API Gateway permission to invoke Lambda
        run: |
          API_ID=${{ steps.api_gateway.outputs.API_ID }}
          SOURCE_ARN="arn:aws:execute-api:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:${API_ID}/*/*"
          STATEMENT_ID="apigateway-invoke-${{ env.LAMBDA_FUNCTION_NAME }}"
          
          aws lambda remove-permission --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --statement-id ${STATEMENT_ID} 2>/dev/null || true
          
          echo "Granting API Gateway permission to invoke Lambda function..."
          aws lambda add-permission \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --statement-id ${STATEMENT_ID} \
            --action lambda:InvokeFunction \
            --principal apigateway.amazonaws.com \
            --source-arn "${SOURCE_ARN}"
          echo "Permission granted."

      - name: Configure API Gateway Throttling
        run: |
          API_ID=${{ steps.api_gateway.outputs.API_ID }}
          echo "Configuring rate limiting for the default stage..."
          aws apigatewayv2 update-stage \
            --api-id ${API_ID} \
            --stage-name '$default' \
            --default-route-settings '{"ThrottlingBurstLimit": 5, "ThrottlingRateLimit": 10.0}'
          echo "Throttling configured to 10 requests/sec with a burst of 5."