# .github/workflows/cleanup-aws.yaml
name: Cleanup AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm you want to delete all AWS resources.'
        required: true
        default: 'do-not-destroy'

env:
  AWS_REGION: us-east-1 # <-- IMPORTANT: Must match the region in your deploy script
  LAMBDA_FUNCTION_NAME: SharedBills-Backend
  DYNAMODB_TABLE_NAME: shared-bills-kv-store
  IAM_ROLE_NAME: Lambda-SharedBills-ExecutionRole

jobs:
  cleanup:
    name: Destroy AWS Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'destroy'
    permissions:
      id-token: write # Required for OIDC authentication with AWS
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-Lambda-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete Lambda Function URL
        run: |
          echo "Checking for Lambda Function URL..."
          if aws lambda get-function-url-config --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Deleting Lambda Function URL for ${{ env.LAMBDA_FUNCTION_NAME }}..."
            aws lambda delete-function-url-config --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
            echo "Lambda Function URL deleted."
          else
            echo "Lambda Function URL does not exist. Skipping."
          fi

      - name: Delete Lambda Function
        run: |
          echo "Checking for Lambda function..."
          if aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Deleting Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}..."
            aws lambda delete-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
            echo "Lambda function deleted."
          else
            echo "Lambda function does not exist. Skipping."
          fi

      - name: Delete DynamoDB Table
        run: |
          echo "Checking for DynamoDB table..."
          if aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} > /dev/null 2>&1; then
            echo "Deleting DynamoDB table: ${{ env.DYNAMODB_TABLE_NAME }}..."
            aws dynamodb delete-table --table-name ${{ env.DYNAMODB_TABLE_NAME }}
            echo "Waiting for table to be deleted..."
            aws dynamodb wait table-not-exists --table-name ${{ env.DYNAMODB_TABLE_NAME }}
            echo "DynamoDB table deleted."
          else
            echo "DynamoDB table does not exist. Skipping."
          fi

      - name: Detach Policies and Delete IAM Role
        run: |
          echo "Checking for IAM role..."
          if aws iam get-role --role-name ${{ env.IAM_ROLE_NAME }} > /dev/null 2>&1; then
            echo "Detaching policies from IAM role: ${{ env.IAM_ROLE_NAME }}..."
            # List and detach all attached policies
            POLICY_ARNS=$(aws iam list-attached-role-policies --role-name ${{ env.IAM_ROLE_NAME }} --query 'AttachedPolicies[*].PolicyArn' --output text)
            if [ -n "$POLICY_ARNS" ]; then
              for POLICY_ARN in $POLICY_ARNS; do
                echo "Detaching policy: $POLICY_ARN"
                aws iam detach-role-policy --role-name ${{ env.IAM_ROLE_NAME }} --policy-arn $POLICY_ARN
              done
            else
              echo "No policies to detach."
            fi
            
            echo "Deleting IAM role: ${{ env.IAM_ROLE_NAME }}..."
            aws iam delete-role --role-name ${{ env.IAM_ROLE_NAME }}
            echo "IAM role deleted."
          else
            echo "IAM role does not exist. Skipping."
          fi

      - name: Log Cleanup Completion
        run: |
          echo "âœ… AWS resource cleanup complete!"
          echo "--------------------------------------------------"
          echo "The following resources have been removed:"
          echo "- Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
          echo "- DynamoDB Table: ${{ env.DYNAMODB_TABLE_NAME }}"
          echo "- IAM Role: ${{ env.IAM_ROLE_NAME }}"
          echo "--------------------------------------------------"
          echo "Note: If any resources were not found, they were skipped as expected."
          echo "Please verify in the AWS console that all resources are gone."
