# This GitHub Actions workflow automates the creation of essential deployment files.
# It triggers on every push to the 'main' branch.
name: Prepare Production Branch

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # This is the key change: Grant write permissions to the GITHUB_TOKEN for this job.
    # This allows the job to push the generated files to the 'production' branch.
    permissions:
      contents: write
    steps:
      # Step 1: Check out the code from the 'main' branch
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Create the Netlify configuration file
      - name: Create Netlify Config
        run: |
          cat <<'EOF' > netlify.toml
          # This file is auto-generated by the CI/CD workflow to ensure correct deployment settings.
          [build]
            # This command is defined in package.json and is required by Netlify's build process.
            command = "npm run build"
            
            # This specifies the directory to deploy. Since index.html is in the root, we use ".".
            # This fixes potential "dist directory not found" errors.
            publish = "."

            # This tells Netlify where to find the source code for the serverless functions.
            functions = "functions"
          EOF

      # Step 3: Create the serverless function directory and the function file itself
      - name: Create Serverless Function
        run: |
          mkdir -p functions
          cat <<'EOF' > functions/scan-receipt.mjs
          import { GoogleGenAI, Type } from "@google/genai";

          // Defines the expected JSON structure from the Gemini API for consistent data handling.
          const responseSchema = {
            type: Type.OBJECT,
            properties: {
              description: {
                type: Type.STRING,
                description: "A short, descriptive title for the receipt (e.g., 'Restaurant Name', 'Grocery Store').",
              },
              date: {
                type: Type.STRING,
                description: "The date of the transaction in YYYY-MM-DD format. Infer if possible.",
                nullable: true,
              },
              total: {
                  type: Type.NUMBER,
                  description: "The final total amount on the receipt after all taxes and tips.",
                  nullable: true,
              },
              items: {
                type: Type.ARRAY,
                description: "A list of all the individual items found on the receipt.",
                items: {
                  type: Type.OBJECT,
                  properties: {
                    name: {
                      type: Type.STRING,
                      description: "The name of the purchased item.",
                    },
                    price: {
                      type: Type.NUMBER,
                      description: "The price of the individual item.",
                    },
                  },
                  required: ["name", "price"],
                },
              },
            },
            required: ["description", "items"],
          };

          // The main handler for the Netlify serverless function.
          export const handler = async (event) => {
            if (event.httpMethod !== 'POST') {
              return { statusCode: 405, body: JSON.stringify({ error: 'Method Not Allowed' }) };
            }

            let body;
            try {
              body = JSON.parse(event.body);
            } catch (error) {
              return { statusCode: 400, body: JSON.stringify({ error: 'Invalid JSON in request body.' }) };
            }
            
            const { base64Image, mimeType } = body;
            if (!base64Image || !mimeType) {
              return { statusCode: 400, body: JSON.stringify({ error: 'Missing required parameters: base64Image and mimeType.' }) };
            }

            // Securely access the API_KEY from Netlify's environment variables.
            const apiKey = process.env.API_KEY;
            if (!apiKey) {
              console.error("API_KEY environment variable not set.");
              return { statusCode: 500, body: JSON.stringify({ error: 'Server configuration error: API key is not set.' }) };
            }

            try {
              const ai = new GoogleGenAI({ apiKey });

              const imagePart = { inlineData: { data: base64Image, mimeType: mimeType } };
              const textPart = { text: "Analyze the provided receipt image. Extract a concise description (like the store name), the date, the final total, and a list of all line items with their individual prices. Ignore any taxes, tips, or subtotals that are not individual items. Return the data in the specified JSON format." };

              const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: { parts: [imagePart, textPart] },
                config: {
                  responseMimeType: "application/json",
                  responseSchema: responseSchema,
                },
              });
              
              const parsedData = JSON.parse(response.text);

              return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(parsedData),
              };

            } catch (error) {
              console.error("Error calling Gemini API:", error);
              return { statusCode: 500, body: JSON.stringify({ error: 'Failed to communicate with the AI service.', details: error.message }) };
            }
          };
          EOF

      # Step 4: Commit the generated files and push them to the 'production' branch
      - name: Commit and Push to Production Branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add netlify.toml functions/scan-receipt.mjs
          # Check if there are changes to commit to avoid empty commits
          if ! git diff-index --quiet HEAD; then
            git commit -m "CI: Add/Update Netlify config and serverless function"
          fi
          # Authenticate the push using the GITHUB_TOKEN provided by the workflow runner
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:production --force
