# .github/workflows/deploy-aws.yaml
name: Deploy Backend to AWS Lambda

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1 # <-- IMPORTANT: Change this to your desired AWS region
  LAMBDA_FUNCTION_NAME: SharedBills-Backend
  DYNAMODB_TABLE_NAME: shared-bills-kv-store

jobs:
  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC authentication with AWS
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
      
      - name: Install Zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build Lambda package
        run: npm run build:lambda

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # IMPORTANT: Create this IAM Role in your AWS account with permissions for Lambda and IAM.
          # Trust relationship should be configured for the GitHub OIDC provider.
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-Lambda-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Create DynamoDB Table if it does not exist
        run: |
          if ! aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} > /dev/null 2>&1; then
            echo "DynamoDB table ${{ env.DYNAMODB_TABLE_NAME }} not found. Creating it..."
            aws dynamodb create-table \
              --table-name ${{ env.DYNAMODB_TABLE_NAME }} \
              --attribute-definitions AttributeName=id,AttributeType=S \
              --key-schema AttributeName=id,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            
            echo "Waiting for table to become active..."
            aws dynamodb wait table-exists --table-name ${{ env.DYNAMODB_TABLE_NAME }}
            
            echo "Enabling Time To Live (TTL) on the table..."
            aws dynamodb update-time-to-live \
              --table-name ${{ env.DYNAMODB_TABLE_NAME }} \
              --time-to-live-specification "Enabled=true, AttributeName=ttl"
              
            echo "DynamoDB table created and configured successfully."
          else
            echo "DynamoDB table ${{ env.DYNAMODB_TABLE_NAME }} already exists. Skipping creation."
          fi

      - name: Create or Update Lambda Execution Role
        id: iam_role
        run: |
          ROLE_NAME="Lambda-SharedBills-ExecutionRole"
          
          # Use the aws command directly in the if condition to handle non-zero exit codes
          if ! ROLE_ARN=$(aws iam get-role --role-name ${ROLE_NAME} --query 'Role.Arn' --output text 2>/dev/null); then
            echo "IAM role ${ROLE_NAME} not found. Creating it..."
            TRUST_POLICY='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
            ROLE_ARN=$(aws iam create-role --role-name ${ROLE_NAME} --assume-role-policy-document "${TRUST_POLICY}" --query 'Role.Arn' --output text)
            
            echo "Attaching policies to new role..."
            aws iam attach-role-policy --role-name ${ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            aws iam attach-role-policy --role-name ${ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess # Note: For production, use a more restrictive policy
            
            echo "Waiting for IAM role to propagate..."
            sleep 15
          else
            echo "IAM role ${ROLE_NAME} already exists."
          fi
          
          echo "EXECUTION_ROLE_ARN=${ROLE_ARN}" >> $GITHUB_OUTPUT

      - name: Deploy Lambda Function
        id: lambda_deploy
        run: |
          # Use the aws command directly in the if condition to handle non-zero exit codes when the function does not exist.
          if ! aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Creating new Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda create-function \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime nodejs20.x \
              --handler lambda.handler \
              --role ${{ steps.iam_role.outputs.EXECUTION_ROLE_ARN }} \
              --zip-file fileb://dist-lambda/function.zip \
              --environment "Variables={API_KEY=${{ secrets.API_KEY }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }},STRIPE_PRICE_ID_YEARLY=${{ secrets.STRIPE_PRICE_ID_YEARLY }},DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }},AWS_REGION=${{ env.AWS_REGION }}}"
          else
            echo "Updating existing Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda update-function-code \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --zip-file fileb://dist-lambda/function.zip
            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --environment "Variables={API_KEY=${{ secrets.API_KEY }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }},STRIPE_PRICE_ID_YEARLY=${{ secrets.STRIPE_PRICE_ID_YEARLY }},DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }},AWS_REGION=${{ env.AWS_REGION }}}"
          fi
          
      - name: Create or Update Lambda Function URL
        id: lambda_url
        run: |
          # Try to get the URL config. If the command fails (e.g., it doesn't exist), the 'if' condition will be true.
          if ! URL_CONFIG=$(aws lambda get-function-url-config --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'FunctionUrl' --output text 2>/dev/null); then
            echo "Creating new Function URL..."
            URL_CONFIG=$(aws lambda create-function-url-config \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --auth-type NONE \
              --cors "AllowOrigins=*" \
              --query 'FunctionUrl' --output text)
          else
             echo "Function URL already exists."
          fi
          
          echo "FUNCTION_URL=$URL_CONFIG" >> $GITHUB_OUTPUT
          
      - name: Log Deployment URL
        run: |
          echo "✅ Deployment successful!"
          echo "--------------------------------------------------"
          echo "✅ AWS Backend URL: ${{ steps.lambda_url.outputs.FUNCTION_URL }}"
          echo "--------------------------------------------------"
          echo "You can now use this URL for API discovery or directly in your frontend."
