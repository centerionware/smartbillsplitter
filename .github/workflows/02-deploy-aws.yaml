name: 2. Deploy Backend to AWS Lambda

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      PROD_URL:
        required: true
    outputs:
      function_url:
        description: "The deployed AWS Lambda Function URL."
        value: ${{ jobs.deploy.outputs.function_url }}

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: SharedBills-Backend
  DYNAMODB_TABLE_NAME: shared-bills-kv-store
  IAM_ROLE_NAME: Lambda-SharedBills-ExecutionRole

jobs:
  deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      function_url: ${{ steps.lambda_url.outputs.FUNCTION_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install
      
      - name: Install Zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build Lambda package
        run: npm run build:lambda

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-Lambda-Role
          aws-region: ${{ env.AWS_REGION }}

      - name: Create DynamoDB Table if it does not exist
        run: |
          if ! aws dynamodb describe-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} > /dev/null 2>&1; then
            echo "DynamoDB table ${{ env.DYNAMODB_TABLE_NAME }} not found. Creating it..."
            aws dynamodb create-table --table-name ${{ env.DYNAMODB_TABLE_NAME }} --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --billing-mode PAY_PER_REQUEST
            echo "Waiting for table to become active..."
            aws dynamodb wait table-exists --table-name ${{ env.DYNAMODB_TABLE_NAME }}
            echo "Enabling Time To Live (TTL) on the table..."
            aws dynamodb update-time-to-live --table-name ${{ env.DYNAMODB_TABLE_NAME }} --time-to-live-specification "Enabled=true, AttributeName=ttl"
            echo "DynamoDB table created and configured successfully."
          else
            echo "DynamoDB table ${{ env.DYNAMODB_TABLE_NAME }} already exists. Skipping creation."
          fi

      - name: Create or Update Lambda Execution Role
        id: iam_role
        run: |
          if ! ROLE_ARN=$(aws iam get-role --role-name ${{ env.IAM_ROLE_NAME }} --query 'Role.Arn' --output text 2>/dev/null); then
            echo "IAM role ${{ env.IAM_ROLE_NAME }} not found. Creating it..."
            TRUST_POLICY='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
            ROLE_ARN=$(aws iam create-role --role-name ${{ env.IAM_ROLE_NAME }} --assume-role-policy-document "${TRUST_POLICY}" --query 'Role.Arn' --output text)
            echo "Attaching policies to new role..."
            aws iam attach-role-policy --role-name ${{ env.IAM_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            aws iam attach-role-policy --role-name ${{ env.IAM_ROLE_NAME }} --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
            echo "Waiting for IAM role to propagate..."
            sleep 15
          else
            echo "IAM role ${{ env.IAM_ROLE_NAME }} already exists."
          fi
          echo "EXECUTION_ROLE_ARN=${ROLE_ARN}" >> $GITHUB_OUTPUT

      - name: Deploy Lambda Function
        run: |
          if ! aws lambda get-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} > /dev/null 2>&1; then
            echo "Creating new Lambda function: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda create-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --runtime nodejs20.x --handler lambda.handler --role ${{ steps.iam_role.outputs.EXECUTION_ROLE_ARN }} --zip-file fileb://dist-lambda/function.zip --environment "Variables={API_KEY=${{ secrets.API_KEY }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }},STRIPE_PRICE_ID_YEARLY=${{ secrets.STRIPE_PRICE_ID_YEARLY }},DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }}}"
          else
            echo "Updating existing Lambda function code: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --zip-file fileb://dist-lambda/function.zip
            echo "Waiting for function code update to complete..."
            aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
            echo "Updating existing Lambda function configuration: ${{ env.LAMBDA_FUNCTION_NAME }}"
            aws lambda update-function-configuration --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --environment "Variables={API_KEY=${{ secrets.API_KEY }},STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }},STRIPE_PRICE_ID_MONTHLY=${{ secrets.STRIPE_PRICE_ID_MONTHLY }},STRIPE_PRICE_ID_YEARLY=${{ secrets.STRIPE_PRICE_ID_YEARLY }},DYNAMODB_TABLE_NAME=${{ env.DYNAMODB_TABLE_NAME }}}"
          fi
          
      - name: Create or Update Lambda Function URL
        id: lambda_url
        run: |
          if [ -z "${{ secrets.PROD_URL }}" ]; then
            echo "::error::PROD_URL secret is not set."
            exit 1
          fi
          CORS_CONFIG="{\"AllowOrigins\":[\"${{ secrets.PROD_URL }}\"],\"AllowMethods\":[\"GET\",\"POST\",\"OPTIONS\"],\"AllowHeaders\":[\"content-type\",\"authorization\"]}"
          
          URL_CONFIG=$(aws lambda get-function-url-config --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'FunctionUrl' --output text 2>/dev/null)
          
          if [ -z "$URL_CONFIG" ]; then
            echo "Function URL not found. Creating a new one with correct CORS settings..."
            URL_CONFIG=$(aws lambda create-function-url-config --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --auth-type NONE --cors "${CORS_CONFIG}" --query 'FunctionUrl' --output text)
          else
             echo "Function URL already exists. Updating CORS configuration..."
             aws lambda update-function-url-config --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --cors "${CORS_CONFIG}"
             echo "CORS configuration updated."
          fi
          
          echo "Lambda Function URL is: ${URL_CONFIG}"
          echo "FUNCTION_URL=${URL_CONFIG}" >> $GITHUB_OUTPUT
      
      - name: Grant Public Access to Function URL
        run: |
          echo "Attempting to grant public access to Lambda Function URL..."
          aws lambda add-permission \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --statement-id FunctionURLAllowPublicAccess \
            --action lambda:InvokeFunctionUrl \
            --principal "*" \
            --function-url-auth-type NONE \
          || echo "Permission may already exist. This is not a fatal error and the workflow will continue."
