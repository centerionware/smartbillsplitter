name: Build, Publish Artifacts & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  FRONTEND_IMAGE_NAME: bill-splitter-frontend
  BACKEND_IMAGE_NAME: bill-splitter-backend

jobs:
  build:
    name: Build Frontend & Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build

      - name: Extract Docker metadata for tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: type=sha,prefix=,format=short

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: |
            dist-server
            package.json
            package-lock.json

  publish-to-branches:
    name: Publish Artifacts to Branches
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend-dist

      - name: Deploy frontend to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "deploy(frontend): ${{ github.event.head_commit.message }} [ci skip]"

      - name: Deploy backend to backend-dist branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./backend-dist
          publish_branch: backend-dist
          force_orphan: true
          commit_message: "deploy(backend): ${{ github.event.head_commit.message }} [ci skip]"

  build-and-push-docker:
    name: Build and Push Docker Images
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend-dist

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend.yaml
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend.yaml
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.build.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-helm-chart:
    name: Update and Publish Helm Chart
    if: github.ref == 'refs/heads/main'
    needs: [build, build-and-push-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout main branch (for source files)
        uses: actions/checkout@v4

      - name: Clone production branch (for destination)
        run: |
          git clone --depth 1 --branch production "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" production-repo

      - name: Sync chart files from main to production
        run: |
          # This copies all chart files from the main branch checkout over the top of the 
          # production branch checkout, ensuring all template updates are included.
          rsync -av --delete ./charts/ production-repo/charts/

      - name: Update Helm chart with new image tags
        run: |
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          DEPLOYMENT_FILE="production-repo/charts/bill-splitter/templates/deployment.yaml"
          
          sed -i 's#image: "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}:[^"]*"#image: "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.FRONTEND_IMAGE_NAME }}:${IMAGE_TAG}"#g' ${DEPLOYMENT_FILE}
          sed -i 's#image: "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}:[^"]*"#image: "${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.BACKEND_IMAGE_NAME }}:${IMAGE_TAG}"#g' ${DEPLOYMENT_FILE}

      - name: Bump Helm chart version
        id: bump_version
        run: |
          CHART_FILE="production-repo/charts/bill-splitter/Chart.yaml"
          VERSION=$(grep '^version:' ${CHART_FILE} | awk '{print $2}')
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          
          sed -i "s/^version: .*/version: ${NEW_VERSION}/" ${CHART_FILE}
          
          echo "Bumped Helm chart from ${VERSION} to ${NEW_VERSION}"
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Commit and push updated chart to production branch
        run: |
          cd production-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add charts/
          if ! git diff --staged --quiet; then
            git commit -m "chore(helm): Bump chart to v${{ steps.bump_version.outputs.new_version }}, update images to tag ${{ needs.build.outputs.image_tag }}"
            git push
          else
            echo "No changes to the Helm chart to commit."
          fi
