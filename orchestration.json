
{
  "projectDescription": "A bill splitting application that allows users to track shared expenses, scan receipts with AI, manage recurring bills, and securely share bills with others. All user data is stored locally on the device.",
  "architectureOverview": {
    "stateManagement": "React Hooks (useState, useEffect, useCallback) are used for component-level state. Cross-component state and actions are managed through custom hooks (`useBills`, `useSettings`, etc.) that interact directly with the IndexedDB service.",
    "dataPersistence": "All user data is stored in the browser's IndexedDB via `services/db.ts`.",
    "backend": "A serverless backend provides API endpoints for AI processing (receipt scanning, CSV parsing) and temporary, encrypted data storage for sharing features. The backend is framework-agnostic, using adapters for different cloud environments (Vercel, Cloudflare, AWS, Express).",
    "styling": "Tailwind CSS is used for styling, with a dark mode feature."
  },
  "featureMap": {
    "app_navigation_and_routing": {
      "description": "Handles changing views within the single-page application (SPA). Uses URL hash for routing.",
      "orchestrator": "App.tsx",
      "keyComponents": ["App.tsx", "components/Header.tsx"],
      "keyHooks": [],
      "keyServices": [],
      "notes": "Navigation logic is centralized in App.tsx, which interprets the URL hash (`currentPath`) to render the correct view component."
    },
    "dashboard": {
      "description": "The main view of the application, displaying summaries, lists of bills, and lists of participants.",
      "orchestrator": "components/Dashboard.tsx",
      "keyComponents": [
        "components/Dashboard.tsx",
        "components/dashboard/DashboardSummary.tsx",
        "components/dashboard/DashboardControls.tsx",
        "components/dashboard/BillList.tsx",
        "components/dashboard/ParticipantList.tsx",
        "components/dashboard/ParticipantDetailView.tsx",
        "components/BillCard.tsx",
        "components/ParticipantCard.tsx"
      ],
      "keyHooks": ["hooks/useBills.ts", "hooks/useImportedBills.ts"],
      "keyServices": [],
      "notes": "Dashboard.tsx fetches data using hooks and passes it down to child components for rendering. It manages filtering, searching, and view-switching logic."
    },
    "bill_creation_and_editing": {
      "description": "Handles the creation of new bills and the creation/editing of recurring bill templates.",
      "orchestrator": "components/CreateBill.tsx",
      "keyComponents": [
        "components/CreateBill.tsx",
        "components/ReceiptScanner.tsx",
        "components/ItemEditor.tsx",
        "components/RecurrenceSelector.tsx",
        "components/BillParticipants.tsx"
      ],
      "keyHooks": ["hooks/useBills.ts", "hooks/useRecurringBills.ts"],
      "keyServices": ["services/geminiService.ts"],
      "notes": "The CreateBill component is a large form that handles multiple states, including standard bills, new recurring templates, and editing existing templates."
    },
    "bill_details": {
      "description": "Displays the details of a single user-created bill, allowing participants' paid status to be toggled and sharing options.",
      "orchestrator": "components/BillDetails.tsx",
      "keyComponents": ["components/BillDetails.tsx", "components/ShareModal.tsx", "components/ShareActionSheet.tsx", "components/ExportActionSheet.tsx"],
      "keyHooks": [],
      "keyServices": ["services/shareService.ts", "services/exportService.ts"],
      "notes": "Handles toggling paid status and initiating the bill sharing flow."
    },
    "imported_bill_details": {
      "description": "Displays the details of a bill imported from another user.",
      "orchestrator": "components/ImportedBillDetails.tsx",
      "keyComponents": ["components/ImportedBillDetails.tsx", "components/PaymentMethodsModal.tsx", "components/SummaryBillDetailsModal.tsx"],
      "keyHooks": [],
      "keyServices": [],
      "notes": "A view-only representation of a shared bill with options to 'Settle Up' or mark as paid locally."
    },
    "settings": {
      "description": "Allows the user to configure their display name, payment details, data management (import/export), and subscription.",
      "orchestrator": "components/Settings.tsx",
      "keyComponents": [
        "components/Settings.tsx",
        "components/settings/Personalization.tsx",
        "components/settings/PaymentIntegrations.tsx",
        "components/settings/DataManagement.tsx",
        "components/settings/DangerZone.tsx"
      ],
      "keyHooks": ["hooks/useSettings.ts"],
      "keyServices": ["services/db.ts"],
      "notes": "The main settings component is a container for smaller, more focused setting sections."
    },
    "ai_receipt_scanning": {
      "description": "Uses the device camera or file upload to send a receipt image to a backend service, which uses the Gemini API to parse it into structured bill data.",
      "orchestrator": "components/ReceiptScanner.tsx",
      "keyComponents": ["components/ReceiptScanner.tsx", "components/CreateBill.tsx"],
      "keyHooks": [],
      "keyServices": ["services/geminiService.ts"],
      "backendFunction": "functions/scan-receipt.ts",
      "notes": "The frontend sends a base64 image to '/scan-receipt'. The backend function handles the secure call to the Gemini API."
    },
    "ai_csv_import": {
      "description": "Allows users to upload a CSV file of transactions, which is sent to the Gemini API via the backend to be parsed into multiple bill objects.",
      "orchestrator": "components/CsvImporterModal.tsx",
      "keyComponents": ["components/CsvImporterModal.tsx", "components/Header.tsx", "App.tsx"],
      "keyHooks": ["hooks/useBills.ts"],
      "keyServices": ["services/geminiService.ts"],
      "backendFunction": "functions/parse-csv.ts",
      "notes": "The frontend sends CSV text content to '/parse-csv'. The backend provides a detailed prompt and schema to the Gemini API for structured JSON output."
    },
    "bill_sharing": {
      "description": "Allows a user to generate a secure, one-time-use link to share a bill with another person. The shared bill can be updated in real-time.",
      "orchestrator": "services/shareService.ts",
      "keyComponents": ["components/BillDetails.tsx", "components/ViewSharedBill.tsx", "components/ShareModal.tsx"],
      "keyHooks": ["hooks/useImportedBills.ts"],
      "keyServices": ["services/cryptoService.ts", "services/shareService.ts"],
      "backendFunctions": ["functions/share.ts", "functions/onetime-key.ts"],
      "notes": "This is a complex feature involving end-to-end encryption. `shareService.ts` contains the client-side logic for key generation, encryption, and API calls. `ViewSharedBill.tsx` handles link consumption."
    },
    "device_sync": {
      "description": "Allows a user to transfer all their application data from one device to another using a QR code.",
      "orchestrator": "components/Sync.tsx",
      "keyComponents": ["components/Sync.tsx"],
      "keyHooks": [],
      "keyServices": ["services/cryptoService.ts", "services/db.ts"],
      "backendFunction": "functions/sync.ts",
      "notes": "Similar to bill sharing, this uses end-to-end encryption with temporary server storage. The entire app database is exported, encrypted, and transferred."
    },
    "subscription_and_paywall": {
      "description": "Manages the user's subscription status (Free vs. Pro) and handles the payment flow.",
      "orchestrator": "AppGate.tsx",
      "keyComponents": ["AppGate.tsx", "components/Paywall.tsx", "components/ManageSubscriptionPage.tsx"],
      "keyHooks": ["hooks/useAuth.ts", "hooks/useSubscriptionManager.ts"],
      "keyServices": ["services/db.ts"],
      "backendFunctions": ["functions/payment.ts", "functions/stripe.ts", "functions/paypal.ts"],
      "notes": "AppGate is the entry point that decides whether to show the paywall or the main app. The backend '/verify-payment' endpoint is crucial for confirming a successful purchase."
    }
  }
}
